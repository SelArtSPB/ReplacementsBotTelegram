import telebot
import json
import logging
import time
import threading
from parser import get_replacements, save_to_json
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
with open('bot_token.txt', 'r') as f:
    bot = telebot.TeleBot(f.read().strip())

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = 'users.json'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    try:
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, 'r') as f:
                return json.load(f)
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(users):
    try:
        with open(USERS_FILE, 'w') as f:
            json.dump(list(set(users)), f)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
def read_replacements():
    try:
        with open('replacements.json', 'r', encoding='utf-8') as file:
            return json.load(file)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ–Ω
def format_replacement(replacement):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –≤ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã
    lesson_num = int(replacement['pair']) if replacement['pair'].isdigit() else 0
    pair_num = (lesson_num + 1) // 2 if lesson_num > 0 else lesson_num
    
    message = f"üïê –ü–∞—Ä–∞: {pair_num}\n"
    
    if replacement['teacher'] == "–û—Ç–º–µ–Ω–∞ –ø–∞—Ä—ã":
        message += "‚ùå –°—Ç–∞—Ç—É—Å: –ü–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n"
    elif replacement['teacher'] == "–ü–µ—Ä–µ–Ω–æ—Å –ø–∞—Ä—ã":
        message += "üîÑ –°—Ç–∞—Ç—É—Å: –ü–∞—Ä–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞\n"
    else:
        if replacement['new_subject']:
            message += f"üìó –ü—Ä–µ–¥–º–µ—Ç: {replacement['new_subject']}\n"
        
        if replacement['teacher']:
            message += f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {replacement['teacher']}\n"
    
    if replacement['classroom']:
        if replacement['classroom'].upper() == '–î–û':
            message += "üè† –§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ\n"
        else:
            message += f"üèõ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {replacement['classroom']}\n"
    
    return message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–º–µ–Ω –ø–æ –ø–∞—Ä–∞–º
def group_replacements_by_pairs(replacements):
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—ã –ø–æ –Ω–æ–º–µ—Ä—É —É—Ä–æ–∫–∞
    sorted_replacements = sorted(replacements, key=lambda x: int(x['pair']) if x['pair'].isdigit() else float('inf'))
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞—Ä–∞–º
    pairs = {}
    for i in range(0, len(sorted_replacements), 2):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫
        current = sorted_replacements[i]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
        next_lesson = sorted_replacements[i + 1] if i + 1 < len(sorted_replacements) else None
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1-2, 3-4 –∏ —Ç.–¥.)
        if (next_lesson and 
            current['pair'].isdigit() and 
            next_lesson['pair'].isdigit() and 
            int(next_lesson['pair']) == int(current['pair']) + 1 and 
            int(current['pair']) % 2 == 1):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –Ω–µ—á–µ—Ç–Ω—ã–π
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä –ø–∞—Ä—ã
            pair_num = (int(current['pair']) + 1) // 2
            pairs[pair_num] = current  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π —É—Ä–æ–∫ –∏–ª–∏ —É—Ä–æ–∫–∏ —Ä–∞–∑–Ω—ã–µ
        else:
            if current['pair'].isdigit():
                pair_num = (int(current['pair']) + 1) // 2
                pairs[pair_num] = current

    return pairs

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("–ó–∞–º–µ–Ω–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º", "–ó–∞–º–µ–Ω–∞ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º")
    keyboard.row("–û—á–∏—Å—Ç–∏—Ç—å")
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    users = load_users()
    if message.chat.id not in users:
        users.append(message.chat.id)
        save_users(users)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: {message.chat.id}")
    
    bot.reply_to(message, 
                 "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ–Ω. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–º–µ–Ω–∞—Ö.",
                 reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–º–µ–Ω–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º"
@bot.message_handler(func=lambda message: message.text == "–ó–∞–º–µ–Ω–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º")
def show_groups(message):
    data = read_replacements()
    if not data or not data['groups']:
        bot.reply_to(message, "–î–∞–Ω–Ω—ã–µ –æ –∑–∞–º–µ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return

    keyboard = telebot.types.InlineKeyboardMarkup(row_width=3)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –Ω–æ–º–µ—Ä—É
    groups = sorted(data['groups'].keys(), key=lambda x: int(x))
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    buttons = []
    for group_number in groups:
        buttons.append(
            telebot.types.InlineKeyboardButton(
                text=group_number,
                callback_data=f"group_{group_number}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 3):
        row = buttons[i:min(i + 3, len(buttons))]
        keyboard.add(*row)

    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–º–µ–Ω–∞ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º"
@bot.message_handler(func=lambda message: message.text == "–ó–∞–º–µ–Ω–∞ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º")
def show_teachers(message):
    data = read_replacements()
    if not data or not data['groups']:
        bot.reply_to(message, "–î–∞–Ω–Ω—ã–µ –æ –∑–∞–º–µ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return

    teachers = set()
    for group_replacements in data['groups'].values():
        for replacement in group_replacements:
            if (replacement['teacher'] and 
                replacement['teacher'] not in ["–û—Ç–º–µ–Ω–∞ –ø–∞—Ä—ã", "–ü–µ—Ä–µ–Ω–æ—Å –ø–∞—Ä—ã"]):
                teachers.add(replacement['teacher'])

    keyboard = telebot.types.InlineKeyboardMarkup()
    for teacher in sorted(teachers):
        keyboard.add(telebot.types.InlineKeyboardButton(
            text=teacher,
            callback_data=f"teacher_{teacher}"
        ))

    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    data = read_replacements()
    if not data:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        return

    if call.data.startswith('group_'):
        group_number = call.data[6:]
        response = f"üìÖ –ó–∞–º–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {group_number}\n"
        if data['raw_date']:
            response += f"üìÜ {data['raw_date']}\n\n"
        
        if group_number in data['groups']:
            replacements = data['groups'][group_number]
            if not replacements:
                response = f"–î–ª—è –≥—Ä—É–ø–ø—ã {group_number} –∑–∞–º–µ–Ω –Ω–µ—Ç"
            else:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—ã –ø–æ –ø–∞—Ä–∞–º
                pairs = group_replacements_by_pairs(replacements)
                for pair_num in sorted(pairs.keys()):
                    response += format_replacement(pairs[pair_num]) + "\n"
        else:
            response = f"–î–ª—è –≥—Ä—É–ø–ø—ã {group_number} –∑–∞–º–µ–Ω –Ω–µ—Ç"
            
    elif call.data.startswith('teacher_'):
        teacher_name = call.data[8:]
        response = f"üë®‚Äçüè´ –ó–∞–º–µ–Ω—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name}\n"
        if data['raw_date']:
            response += f"üìÜ {data['raw_date']}\n\n"
        
        # –°–æ–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        teacher_replacements = []
        for group_number, replacements in data['groups'].items():
            for replacement in replacements:
                if replacement['teacher'] == teacher_name:
                    replacement_with_group = {**replacement, 'group_number': group_number}
                    teacher_replacements.append(replacement_with_group)
        
        if teacher_replacements:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—ã –ø–æ –ø–∞—Ä–∞–º
            pairs = group_replacements_by_pairs(teacher_replacements)
            for pair_num in sorted(pairs.keys()):
                response += f"üë• –ì—Ä—É–ø–ø–∞: {pairs[pair_num]['group_number']}\n"
                response += format_replacement(pairs[pair_num]) + "\n"
        else:
            response = f"–î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name} –∑–∞–º–µ–Ω –Ω–µ—Ç"

    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, response)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def notify_users(new_data):
    users = load_users()
    date_str = new_data.get('raw_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–±–∑–æ—Ä–æ–º –∑–∞–º–µ–Ω
    message = f"üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–º–µ–Ω—ã –Ω–∞ {date_str}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å –∑–∞–º–µ–Ω–∞–º–∏
    groups = new_data.get('groups', {}).keys()
    if groups:
        message += "–ó–∞–º–µ–Ω—ã –µ—Å—Ç—å –¥–ª—è –≥—Ä—É–ø–ø: " + ", ".join(sorted(groups, key=lambda x: int(x))) + "\n\n"
        message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user_id in users:
        try:
            bot.send_message(user_id, message, reply_markup=get_main_keyboard())
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
            if "Forbidden" in str(e) or "chat not found" in str(e).lower():
                users.remove(user_id)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    save_users(users)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
def check_updates():
    while True:
        try:
            current_time = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 17-18 —á–∞—Å–æ–≤
            if current_time.hour == 17:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                new_data = get_replacements()
                
                if new_data and 'error' not in new_data:
                    try:
                        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                        current_data = read_replacements()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –¥–∞—Ç–∞
                        new_date = new_data.get('date')
                        current_date = current_data.get('date') if current_data else None
                        
                        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –∏–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
                        if current_data != new_data:
                            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            if os.path.exists('replacements.json'):
                                os.remove('replacements.json')
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                            save_to_json(new_data)
                            logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ–Ω")
                            
                            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            if new_date != current_date:
                                notify_users(new_data)
                                logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–º–µ–Ω–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
                            
                    except FileNotFoundError:
                        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        save_to_json(new_data)
                        notify_users(new_data)
                        logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–º–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                
                # –ñ–¥–µ–º 20 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                time.sleep(20 * 60)
            else:
                # –ï—Å–ª–∏ –Ω–µ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 17-18, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç
                time.sleep(30 * 60)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            time.sleep(5 * 60)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å"
@bot.message_handler(func=lambda message: message.text == "–û—á–∏—Å—Ç–∏—Ç—å")
def clear_chat(message):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for i in range(message.message_id, 0, -1):
            try:
                bot.delete_message(message.chat.id, i)
            except:
                break
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(
        message.chat.id,
        "–î–∏–∞–ª–æ–≥ –æ—á–∏—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ–Ω:",
        reply_markup=get_main_keyboard()
    )

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    update_thread = threading.Thread(target=check_updates)
    update_thread.daemon = True
    update_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)
