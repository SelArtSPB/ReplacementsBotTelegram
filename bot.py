import telebot
import json
import logging
import time
import threading
from parser import get_replacements, save_to_json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
with open('bot_token.txt', 'r') as f:
    bot = telebot.TeleBot(f.read().strip())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
def read_replacements():
    try:
        with open('replacements.json', 'r', encoding='utf-8') as file:
            return json.load(file)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ–Ω
def format_replacement(replacement):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –≤ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã
    lesson_num = int(replacement['pair']) if replacement['pair'].isdigit() else 0
    pair_num = (lesson_num + 1) // 2 if lesson_num > 0 else lesson_num
    
    message = f"üïê –ü–∞—Ä–∞: {pair_num}\n"
    
    if replacement['teacher'] == "–û—Ç–º–µ–Ω–∞ –ø–∞—Ä—ã":
        message += "‚ùå –°—Ç–∞—Ç—É—Å: –ü–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n"
    elif replacement['teacher'] == "–ü–µ—Ä–µ–Ω–æ—Å –ø–∞—Ä—ã":
        message += "üîÑ –°—Ç–∞—Ç—É—Å: –ü–∞—Ä–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞\n"
    else:
        if replacement['new_subject']:
            message += f"üìó –ü—Ä–µ–¥–º–µ—Ç: {replacement['new_subject']}\n"
        
        if replacement['teacher']:
            message += f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {replacement['teacher']}\n"
    
    if replacement['classroom']:
        if replacement['classroom'].upper() == '–î–û':
            message += "üè† –§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ\n"
        else:
            message += f"üèõ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {replacement['classroom']}\n"
    
    return message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–º–µ–Ω –ø–æ –ø–∞—Ä–∞–º
def group_replacements_by_pairs(replacements):
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—ã –ø–æ –Ω–æ–º–µ—Ä—É —É—Ä–æ–∫–∞
    sorted_replacements = sorted(replacements, key=lambda x: int(x['pair']) if x['pair'].isdigit() else float('inf'))
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞—Ä–∞–º
    pairs = {}
    for i in range(0, len(sorted_replacements), 2):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫
        current = sorted_replacements[i]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —ÉÔøΩÔøΩ–æ–∫
        next_lesson = sorted_replacements[i + 1] if i + 1 < len(sorted_replacements) else None
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1-2, 3-4 –∏ —Ç.–¥.)
        if (next_lesson and 
            current['pair'].isdigit() and 
            next_lesson['pair'].isdigit() and 
            int(next_lesson['pair']) == int(current['pair']) + 1 and 
            int(current['pair']) % 2 == 1):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –Ω–µ—á–µ—Ç–Ω—ã–π
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä –ø–∞—Ä—ã
            pair_num = (int(current['pair']) + 1) // 2
            pairs[pair_num] = current  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π —É—Ä–æ–∫ –∏–ª–∏ —É—Ä–æ–∫–∏ —Ä–∞–∑–Ω—ã–µ
        else:
            if current['pair'].isdigit():
                pair_num = (int(current['pair']) + 1) // 2
                pairs[pair_num] = current

    return pairs

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("–ó–∞–º–µ–Ω–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º", "–ó–∞–º–µ–Ω–∞ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º")
    keyboard.row("–û—á–∏—Å—Ç–∏—Ç—å")
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, 
                 "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ–Ω:",
                 reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–º–µ–Ω–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º"
@bot.message_handler(func=lambda message: message.text == "–ó–∞–º–µ–Ω–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º")
def show_groups(message):
    data = read_replacements()
    if not data or not data['groups']:
        bot.reply_to(message, "–î–∞–Ω–Ω—ã–µ –æ –∑–∞–º–µ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return

    keyboard = telebot.types.InlineKeyboardMarkup(row_width=3)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –Ω–æ–º–µ—Ä—É
    groups = sorted(data['groups'].keys(), key=lambda x: int(x))
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    buttons = []
    for group_number in groups:
        buttons.append(
            telebot.types.InlineKeyboardButton(
                text=group_number,
                callback_data=f"group_{group_number}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 3):
        row = buttons[i:min(i + 3, len(buttons))]
        keyboard.add(*row)

    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–º–µ–Ω–∞ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º"
@bot.message_handler(func=lambda message: message.text == "–ó–∞–º–µ–Ω–∞ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º")
def show_teachers(message):
    data = read_replacements()
    if not data or not data['groups']:
        bot.reply_to(message, "–î–∞–Ω–Ω—ã–µ –æ –∑–∞–º–µ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return

    teachers = set()
    for group_replacements in data['groups'].values():
        for replacement in group_replacements:
            if (replacement['teacher'] and 
                replacement['teacher'] not in ["–û—Ç–º–µ–Ω–∞ –ø–∞—Ä—ã", "–ü–µ—Ä–µ–Ω–æ—Å –ø–∞—Ä—ã"]):
                teachers.add(replacement['teacher'])

    keyboard = telebot.types.InlineKeyboardMarkup()
    for teacher in sorted(teachers):
        keyboard.add(telebot.types.InlineKeyboardButton(
            text=teacher,
            callback_data=f"teacher_{teacher}"
        ))

    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    data = read_replacements()
    if not data:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        return

    if call.data.startswith('group_'):
        group_number = call.data[6:]
        response = f"üìÖ –ó–∞–º–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {group_number}\n"
        if data['raw_date']:
            response += f"üìÜ {data['raw_date']}\n\n"
        
        if group_number in data['groups']:
            replacements = data['groups'][group_number]
            if not replacements:
                response = f"–î–ª—è –≥—Ä—É–ø–ø—ã {group_number} –∑–∞–º–µ–Ω –Ω–µ—Ç"
            else:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—ã –ø–æ –ø–∞—Ä–∞–º
                pairs = group_replacements_by_pairs(replacements)
                for pair_num in sorted(pairs.keys()):
                    response += format_replacement(pairs[pair_num]) + "\n"
        else:
            response = f"–î–ª—è –≥—Ä—É–ø–ø—ã {group_number} –∑–∞–º–µ–Ω –Ω–µ—Ç"
            
    elif call.data.startswith('teacher_'):
        teacher_name = call.data[8:]
        response = f"üë®‚Äçüè´ –ó–∞–º–µ–Ω—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name}\n"
        if data['raw_date']:
            response += f"üìÜ {data['raw_date']}\n\n"
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        teacher_replacements = []
        for group_number, replacements in data['groups'].items():
            for replacement in replacements:
                if replacement['teacher'] == teacher_name:
                    replacement_with_group = {**replacement, 'group_number': group_number}
                    teacher_replacements.append(replacement_with_group)
        
        if teacher_replacements:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—ã –ø–æ –ø–∞—Ä–∞–º
            pairs = group_replacements_by_pairs(teacher_replacements)
            for pair_num in sorted(pairs.keys()):
                response += f"üë• –ì—Ä—É–ø–ø–∞: {pairs[pair_num]['group_number']}\n"
                response += format_replacement(pairs[pair_num]) + "\n"
        else:
            response = f"–î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name} –∑–∞–º–µ–Ω –Ω–µ—Ç"

    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, response)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
def check_updates():
    while True:
        try:
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
            new_data = get_replacements()
            if new_data and not isinstance(new_data, dict) or 'error' not in new_data:
                current_data = read_replacements()
                if current_data != new_data:
                    save_to_json(new_data)
                    logger.info("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        
        time.sleep(6 * 60 * 60)  # 6 —á–∞—Å–æ–≤

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å"
@bot.message_handler(func=lambda message: message.text == "–û—á–∏—Å—Ç–∏—Ç—å")
def clear_chat(message):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for i in range(message.message_id, 0, -1):
            try:
                bot.delete_message(message.chat.id, i)
            except:
                break
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(
        message.chat.id,
        "–î–∏–∞–ª–æ–≥ –æ—á–∏—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ–Ω:",
        reply_markup=get_main_keyboard()
    )

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    update_thread = threading.Thread(target=check_updates)
    update_thread.daemon = True
    update_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)
